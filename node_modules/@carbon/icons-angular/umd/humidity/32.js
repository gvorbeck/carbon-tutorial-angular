(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@carbon/icon-helpers')) :
    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@carbon/icon-helpers'], factory) :
    (global = global || self, factory(global.CarbonIconsAngular = {}, global.ng.Core, global.CarbonIconHelpers));
}(this, (function (exports, core, iconHelpers) { 'use strict';

    var Humidity32 = /** @class */ (function () {
        function Humidity32() {
            this.focusable = false;
        }
        Humidity32.decorators = [
            { type: core.Component, args: [{
                        selector: "ibm-icon-humidity32",
                        template: "\n    <svg\n      ibmIconHumidity32\n      [ariaLabel]=\"ariaLabel\"\n      [ariaLabelledby]=\"ariaLabelledby\"\n      [ariaHidden]=\"ariaHidden\"\n      [title]=\"title\"\n      [isFocusable]=\"focusable\"\n      [attr.class]=\"innerClass\">\n    </svg>\n  "
                    },] },
        ];
        Humidity32.propDecorators = {
            ariaLabel: [{ type: core.Input }],
            ariaLabelledby: [{ type: core.Input }],
            ariaHidden: [{ type: core.Input }],
            title: [{ type: core.Input }],
            focusable: [{ type: core.Input }],
            innerClass: [{ type: core.Input }]
        };
        return Humidity32;
    }());
    var Humidity32Directive = /** @class */ (function () {
        function Humidity32Directive(elementRef) {
            this.elementRef = elementRef;
            this.isFocusable = false;
        }
        Humidity32Directive.prototype.ngAfterViewInit = function () {
            var svg = this.elementRef.nativeElement;
            svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
            var domParser = new DOMParser();
            var rawSVG = "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" style=\"will-change: transform;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M23.5 30H8.5A6.4944 6.4944 0 0 1 7.2 17.1415a8.9943 8.9943 0 0 1 17.6006 0A6.4945 6.4945 0 0 1 23.5 30zM16 12.0053a6.9987 6.9987 0 0 0-6.9414 6.1431L8.96 18.96l-.8155.0639A4.4947 4.4947 0 0 0 8.5 28h15a4.4947 4.4947 0 0 0 .3564-8.9757L23.041 18.96l-.0986-.812A7.0012 7.0012 0 0 0 16 12.0053zM26 12a4.0045 4.0045 0 0 1-4-4c0-2.6624 2.9893-5.4353 3.33-5.7427a1.0005 1.0005 0 0 1 1.34.0005C27.0112 2.5657 30 5.3418 30 8A4.0045 4.0045 0 0 1 26 12zm0-7.5828c-.853.9307-2 2.4385-2 3.5828a2 2 0 0 0 4 0C28 6.8525 26.8535 5.3464 26.0005 4.4172z\"></path></svg>";
            var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
            var node = svgElement.firstChild;
            while (node) {
                // importNode makes a clone of the node
                // this ensures we keep looping over the nodes in the parsed document
                svg.appendChild(svg.ownerDocument.importNode(node, true));
                node = node.nextSibling;
            }
            var attributes = iconHelpers.getAttributes({
                width: 32,
                height: 32,
                viewBox: "0 0 32 32",
                title: this.title,
                "aria-label": this.ariaLabel,
                "aria-labelledby": this.ariaLabelledby,
                "aria-hidden": this.ariaHidden,
                focusable: this.isFocusable.toString()
            });
            var attrKeys = Object.keys(attributes);
            for (var i = 0; i < attrKeys.length; i++) {
                var key = attrKeys[i];
                var value = attributes[key];
                if (key === "title") {
                    continue;
                }
                if (value) {
                    svg.setAttribute(key, value);
                }
            }
            if (attributes.title) {
                var title = document.createElement("title");
                title.textContent = attributes.title;
                Humidity32Directive.titleIdCounter++;
                title.setAttribute("id", "humidity32-" + Humidity32Directive.titleIdCounter);
                svg.appendChild(title);
                svg.setAttribute("aria-labelledby", "humidity32-" + Humidity32Directive.titleIdCounter);
            }
        };
        Humidity32Directive.titleIdCounter = 0;
        Humidity32Directive.decorators = [
            { type: core.Directive, args: [{
                        selector: "[ibmIconHumidity32]"
                    },] },
        ];
        /** @nocollapse */
        Humidity32Directive.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        Humidity32Directive.propDecorators = {
            ariaLabel: [{ type: core.Input }],
            ariaLabelledby: [{ type: core.Input }],
            ariaHidden: [{ type: core.Input }],
            title: [{ type: core.Input }],
            isFocusable: [{ type: core.Input }]
        };
        return Humidity32Directive;
    }());
    var Humidity32Module = /** @class */ (function () {
        function Humidity32Module() {
        }
        Humidity32Module.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            Humidity32,
                            Humidity32Directive
                        ],
                        exports: [
                            Humidity32,
                            Humidity32Directive
                        ]
                    },] },
        ];
        return Humidity32Module;
    }());

    exports.Humidity32 = Humidity32;
    exports.Humidity32Directive = Humidity32Directive;
    exports.Humidity32Module = Humidity32Module;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
