(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@carbon/icon-helpers')) :
    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@carbon/icon-helpers'], factory) :
    (global = global || self, factory(global.CarbonIconsAngular = {}, global.ng.Core, global.CarbonIconHelpers));
}(this, (function (exports, core, iconHelpers) { 'use strict';

    var NoodleBowl32 = /** @class */ (function () {
        function NoodleBowl32() {
            this.focusable = false;
        }
        NoodleBowl32.decorators = [
            { type: core.Component, args: [{
                        selector: "ibm-icon-noodle-bowl32",
                        template: "\n    <svg\n      ibmIconNoodleBowl32\n      [ariaLabel]=\"ariaLabel\"\n      [ariaLabelledby]=\"ariaLabelledby\"\n      [ariaHidden]=\"ariaHidden\"\n      [title]=\"title\"\n      [isFocusable]=\"focusable\"\n      [attr.class]=\"innerClass\">\n    </svg>\n  "
                    },] },
        ];
        NoodleBowl32.propDecorators = {
            ariaLabel: [{ type: core.Input }],
            ariaLabelledby: [{ type: core.Input }],
            ariaHidden: [{ type: core.Input }],
            title: [{ type: core.Input }],
            focusable: [{ type: core.Input }],
            innerClass: [{ type: core.Input }]
        };
        return NoodleBowl32;
    }());
    var NoodleBowl32Directive = /** @class */ (function () {
        function NoodleBowl32Directive(elementRef) {
            this.elementRef = elementRef;
            this.isFocusable = false;
        }
        NoodleBowl32Directive.prototype.ngAfterViewInit = function () {
            var svg = this.elementRef.nativeElement;
            svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
            var domParser = new DOMParser();
            var rawSVG = "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" style=\"will-change: transform;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M11.4141,15l-8-8L2,8.4141,8.5859,15H2v1a14,14,0,0,0,28,0V15ZM16,28A12.0166,12.0166,0,0,1,4.0415,17h23.917A12.0166,12.0166,0,0,1,16,28Z\"></path><path d=\"M22,8a5.0049,5.0049,0,0,0-1.5708.2554A8.0242,8.0242,0,0,0,14,5,7.9364,7.9364,0,0,0,9.0938,6.68L4.4141,2,3,3.4141,9.05,9.4648l.707-.7075A5.96,5.96,0,0,1,14,7a6.02,6.02,0,0,1,4.6875,2.2642,5.06,5.06,0,0,0-.59.61A2.9892,2.9892,0,0,1,15.7544,11H12v2h3.7544a4.98,4.98,0,0,0,3.9033-1.8745A3,3,0,0,1,25,13h2A5.0059,5.0059,0,0,0,22,8Z\"></path></svg>";
            var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
            var node = svgElement.firstChild;
            while (node) {
                // importNode makes a clone of the node
                // this ensures we keep looping over the nodes in the parsed document
                svg.appendChild(svg.ownerDocument.importNode(node, true));
                node = node.nextSibling;
            }
            var attributes = iconHelpers.getAttributes({
                width: 32,
                height: 32,
                viewBox: "0 0 32 32",
                title: this.title,
                "aria-label": this.ariaLabel,
                "aria-labelledby": this.ariaLabelledby,
                "aria-hidden": this.ariaHidden,
                focusable: this.isFocusable.toString()
            });
            var attrKeys = Object.keys(attributes);
            for (var i = 0; i < attrKeys.length; i++) {
                var key = attrKeys[i];
                var value = attributes[key];
                if (key === "title") {
                    continue;
                }
                if (value) {
                    svg.setAttribute(key, value);
                }
            }
            if (attributes.title) {
                var title = document.createElement("title");
                title.textContent = attributes.title;
                NoodleBowl32Directive.titleIdCounter++;
                title.setAttribute("id", "noodle-bowl32-" + NoodleBowl32Directive.titleIdCounter);
                svg.appendChild(title);
                svg.setAttribute("aria-labelledby", "noodle-bowl32-" + NoodleBowl32Directive.titleIdCounter);
            }
        };
        NoodleBowl32Directive.titleIdCounter = 0;
        NoodleBowl32Directive.decorators = [
            { type: core.Directive, args: [{
                        selector: "[ibmIconNoodleBowl32]"
                    },] },
        ];
        /** @nocollapse */
        NoodleBowl32Directive.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        NoodleBowl32Directive.propDecorators = {
            ariaLabel: [{ type: core.Input }],
            ariaLabelledby: [{ type: core.Input }],
            ariaHidden: [{ type: core.Input }],
            title: [{ type: core.Input }],
            isFocusable: [{ type: core.Input }]
        };
        return NoodleBowl32Directive;
    }());
    var NoodleBowl32Module = /** @class */ (function () {
        function NoodleBowl32Module() {
        }
        NoodleBowl32Module.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            NoodleBowl32,
                            NoodleBowl32Directive
                        ],
                        exports: [
                            NoodleBowl32,
                            NoodleBowl32Directive
                        ]
                    },] },
        ];
        return NoodleBowl32Module;
    }());

    exports.NoodleBowl32 = NoodleBowl32;
    exports.NoodleBowl32Directive = NoodleBowl32Directive;
    exports.NoodleBowl32Module = NoodleBowl32Module;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
