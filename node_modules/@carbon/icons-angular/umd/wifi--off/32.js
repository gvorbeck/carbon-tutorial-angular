(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@carbon/icon-helpers')) :
    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@carbon/icon-helpers'], factory) :
    (global = global || self, factory(global.CarbonIconsAngular = {}, global.ng.Core, global.CarbonIconHelpers));
}(this, (function (exports, core, iconHelpers) { 'use strict';

    var WifiOff32 = /** @class */ (function () {
        function WifiOff32() {
            this.focusable = false;
        }
        WifiOff32.decorators = [
            { type: core.Component, args: [{
                        selector: "ibm-icon-wifi-off32",
                        template: "\n    <svg\n      ibmIconWifiOff32\n      [ariaLabel]=\"ariaLabel\"\n      [ariaLabelledby]=\"ariaLabelledby\"\n      [ariaHidden]=\"ariaHidden\"\n      [title]=\"title\"\n      [isFocusable]=\"focusable\"\n      [attr.class]=\"innerClass\">\n    </svg>\n  "
                    },] },
        ];
        WifiOff32.propDecorators = {
            ariaLabel: [{ type: core.Input }],
            ariaLabelledby: [{ type: core.Input }],
            ariaHidden: [{ type: core.Input }],
            title: [{ type: core.Input }],
            focusable: [{ type: core.Input }],
            innerClass: [{ type: core.Input }]
        };
        return WifiOff32;
    }());
    var WifiOff32Directive = /** @class */ (function () {
        function WifiOff32Directive(elementRef) {
            this.elementRef = elementRef;
            this.isFocusable = false;
        }
        WifiOff32Directive.prototype.ngAfterViewInit = function () {
            var svg = this.elementRef.nativeElement;
            svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
            var domParser = new DOMParser();
            var rawSVG = "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" style=\"will-change: transform;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><circle cx=\"16\" cy=\"25\" r=\"2\"></circle><path d=\"M30 3.4141L28.5859 2 2 28.5859 3.4141 30 14.0962 19.3179a5.9359 5.9359 0 0 1 6.01 1.3193L21.52 19.2236a7.9669 7.9669 0 0 0-5.125-2.2041l3.3875-3.3877a11.9908 11.9908 0 0 1 4.5647 2.7647L25.76 14.9829A13.975 13.975 0 0 0 21.334 12.08L24.3308 9.083a17.9364 17.9364 0 0 1 4.2546 3.0747L30 10.7432v-.002a20.02 20.02 0 0 0-4.1895-3.1377zM14.68 13.0776l2.0415-2.0415C16.481 11.0234 16.2437 11 16 11a13.9447 13.9447 0 0 0-9.771 3.9927l1.4136 1.4136A11.97 11.97 0 0 1 14.68 13.0776zM16 7a17.87 17.87 0 0 1 4.2324.5254L21.875 5.8828A19.9537 19.9537 0 0 0 2 10.7412v.0225L3.4043 12.168A17.9193 17.9193 0 0 1 16 7z\"></path></svg>";
            var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
            var node = svgElement.firstChild;
            while (node) {
                // importNode makes a clone of the node
                // this ensures we keep looping over the nodes in the parsed document
                svg.appendChild(svg.ownerDocument.importNode(node, true));
                node = node.nextSibling;
            }
            var attributes = iconHelpers.getAttributes({
                width: 32,
                height: 32,
                viewBox: "0 0 32 32",
                title: this.title,
                "aria-label": this.ariaLabel,
                "aria-labelledby": this.ariaLabelledby,
                "aria-hidden": this.ariaHidden,
                focusable: this.isFocusable.toString()
            });
            var attrKeys = Object.keys(attributes);
            for (var i = 0; i < attrKeys.length; i++) {
                var key = attrKeys[i];
                var value = attributes[key];
                if (key === "title") {
                    continue;
                }
                if (value) {
                    svg.setAttribute(key, value);
                }
            }
            if (attributes.title) {
                var title = document.createElement("title");
                title.textContent = attributes.title;
                WifiOff32Directive.titleIdCounter++;
                title.setAttribute("id", "wifi-off32-" + WifiOff32Directive.titleIdCounter);
                svg.appendChild(title);
                svg.setAttribute("aria-labelledby", "wifi-off32-" + WifiOff32Directive.titleIdCounter);
            }
        };
        WifiOff32Directive.titleIdCounter = 0;
        WifiOff32Directive.decorators = [
            { type: core.Directive, args: [{
                        selector: "[ibmIconWifiOff32]"
                    },] },
        ];
        /** @nocollapse */
        WifiOff32Directive.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        WifiOff32Directive.propDecorators = {
            ariaLabel: [{ type: core.Input }],
            ariaLabelledby: [{ type: core.Input }],
            ariaHidden: [{ type: core.Input }],
            title: [{ type: core.Input }],
            isFocusable: [{ type: core.Input }]
        };
        return WifiOff32Directive;
    }());
    var WifiOff32Module = /** @class */ (function () {
        function WifiOff32Module() {
        }
        WifiOff32Module.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            WifiOff32,
                            WifiOff32Directive
                        ],
                        exports: [
                            WifiOff32,
                            WifiOff32Directive
                        ]
                    },] },
        ];
        return WifiOff32Module;
    }());

    exports.WifiOff32 = WifiOff32;
    exports.WifiOff32Directive = WifiOff32Directive;
    exports.WifiOff32Module = WifiOff32Module;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
