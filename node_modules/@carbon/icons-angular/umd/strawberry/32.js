(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@carbon/icon-helpers')) :
    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@carbon/icon-helpers'], factory) :
    (global = global || self, factory(global.CarbonIconsAngular = {}, global.ng.Core, global.CarbonIconHelpers));
}(this, (function (exports, core, iconHelpers) { 'use strict';

    var Strawberry32 = /** @class */ (function () {
        function Strawberry32() {
            this.focusable = false;
        }
        Strawberry32.decorators = [
            { type: core.Component, args: [{
                        selector: "ibm-icon-strawberry32",
                        template: "\n    <svg\n      ibmIconStrawberry32\n      [ariaLabel]=\"ariaLabel\"\n      [ariaLabelledby]=\"ariaLabelledby\"\n      [ariaHidden]=\"ariaHidden\"\n      [title]=\"title\"\n      [isFocusable]=\"focusable\"\n      [attr.class]=\"innerClass\">\n    </svg>\n  "
                    },] },
        ];
        Strawberry32.propDecorators = {
            ariaLabel: [{ type: core.Input }],
            ariaLabelledby: [{ type: core.Input }],
            ariaHidden: [{ type: core.Input }],
            title: [{ type: core.Input }],
            focusable: [{ type: core.Input }],
            innerClass: [{ type: core.Input }]
        };
        return Strawberry32;
    }());
    var Strawberry32Directive = /** @class */ (function () {
        function Strawberry32Directive(elementRef) {
            this.elementRef = elementRef;
            this.isFocusable = false;
        }
        Strawberry32Directive.prototype.ngAfterViewInit = function () {
            var svg = this.elementRef.nativeElement;
            svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
            var domParser = new DOMParser();
            var rawSVG = "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" style=\"will-change: transform;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M9 10H11V12H9zM9 14H11V16H9zM13 12H15V14H13z\"></path><path d=\"M9 28a5.169 5.169 0 0 1-.7441-.054A5.0935 5.0935 0 0 1 4 22.8669V11.1985a7.1615 7.1615 0 0 1 6.31-7.1653 6.9607 6.9607 0 0 1 4.4643 1.0706l7.9688 4.9807a6.98 6.98 0 0 1-.6885 12.19l-10.88 5.2285A4.9765 4.9765 0 0 1 9 28zM11.002 6q-.2484 0-.5005.0241A5.1463 5.1463 0 0 0 6 11.1985V22.8669a3.0839 3.0839 0 0 0 2.5435 3.1 3.0266 3.0266 0 0 0 1.7622-.2649l10.8828-5.23a4.9807 4.9807 0 0 0 .4887-8.6958L13.7046 6.7935A4.9687 4.9687 0 0 0 11.002 6zM26 7H22a4.0045 4.0045 0 0 1-4-4V2h2V3a2.0021 2.0021 0 0 0 2 2h4z\"></path></svg>";
            var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
            var node = svgElement.firstChild;
            while (node) {
                // importNode makes a clone of the node
                // this ensures we keep looping over the nodes in the parsed document
                svg.appendChild(svg.ownerDocument.importNode(node, true));
                node = node.nextSibling;
            }
            var attributes = iconHelpers.getAttributes({
                width: 32,
                height: 32,
                viewBox: "0 0 32 32",
                title: this.title,
                "aria-label": this.ariaLabel,
                "aria-labelledby": this.ariaLabelledby,
                "aria-hidden": this.ariaHidden,
                focusable: this.isFocusable.toString()
            });
            var attrKeys = Object.keys(attributes);
            for (var i = 0; i < attrKeys.length; i++) {
                var key = attrKeys[i];
                var value = attributes[key];
                if (key === "title") {
                    continue;
                }
                if (value) {
                    svg.setAttribute(key, value);
                }
            }
            if (attributes.title) {
                var title = document.createElement("title");
                title.textContent = attributes.title;
                Strawberry32Directive.titleIdCounter++;
                title.setAttribute("id", "strawberry32-" + Strawberry32Directive.titleIdCounter);
                svg.appendChild(title);
                svg.setAttribute("aria-labelledby", "strawberry32-" + Strawberry32Directive.titleIdCounter);
            }
        };
        Strawberry32Directive.titleIdCounter = 0;
        Strawberry32Directive.decorators = [
            { type: core.Directive, args: [{
                        selector: "[ibmIconStrawberry32]"
                    },] },
        ];
        /** @nocollapse */
        Strawberry32Directive.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        Strawberry32Directive.propDecorators = {
            ariaLabel: [{ type: core.Input }],
            ariaLabelledby: [{ type: core.Input }],
            ariaHidden: [{ type: core.Input }],
            title: [{ type: core.Input }],
            isFocusable: [{ type: core.Input }]
        };
        return Strawberry32Directive;
    }());
    var Strawberry32Module = /** @class */ (function () {
        function Strawberry32Module() {
        }
        Strawberry32Module.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            Strawberry32,
                            Strawberry32Directive
                        ],
                        exports: [
                            Strawberry32,
                            Strawberry32Directive
                        ]
                    },] },
        ];
        return Strawberry32Module;
    }());

    exports.Strawberry32 = Strawberry32;
    exports.Strawberry32Directive = Strawberry32Directive;
    exports.Strawberry32Module = Strawberry32Module;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
