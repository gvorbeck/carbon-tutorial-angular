{"version":3,"file":"event.service.js","sourceRoot":"","sources":["../src/utils/event.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAa,MAAM,eAAe,CAAC;AACtD,OAAO,EAAc,SAAS,EAAE,YAAY,EAAE,MAAM,MAAM,CAAC;AAC3D,OAAO,EAAE,eAAe,EAAE,MAAM,oBAAoB,CAAC;AAIrD,MAAM,CAAC,IAAM,kBAAkB,GAAG,UAAC,aAAoC,EAAE,SAAiB;IACzF,QAAQ,SAAS,EAAE;QAClB,KAAK,QAAQ,CAAC;QACd,KAAK,QAAQ,CAAC;QACd,KAAK,YAAY,CAAC;QAClB,KAAK,WAAW,CAAC;QACjB,KAAK,UAAU;YACd,OAAO,SAAS,CAAC,aAAa,EAAE,SAAS,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;QAC/D;YACC,OAAO,SAAS,CAAC,aAAa,EAAE,SAAS,CAAC,CAAC;KAC5C;AACF,CAAC,CAAC;AAEF;IAMC,sBAAsB,eAAgC;QAAhC,oBAAe,GAAf,eAAe,CAAiB;QAJ5C,kBAAa,GAAG,IAAI,YAAY,EAAE,CAAC;QAEnC,YAAO,GAAG,IAAI,OAAO,EAAoE,CAAC;IAE3C,CAAC;IAE1D,yBAAE,GAAF,UAAG,aAAoC,EAAE,SAAiB,EAAE,QAAsB;QACjF,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,EAAE;YACrC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,IAAI,GAAG,EAAE,CAAC,CAAC;SAC3C;QAED,IAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QAEjD,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;YAC7B,QAAQ,CAAC,GAAG,CAAC,SAAS,EAAE,kBAAkB,CAAC,aAAa,EAAE,SAAS,CAAC,CAAC,CAAC;SACtE;QAED,IAAM,YAAY,GAAG,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QACjE,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;IACtC,CAAC;IAED,iCAAU,GAAV,UAAW,SAAiB,EAAE,QAAsB;QACnD,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;IACvD,CAAC;IAED,kCAAW,GAAX;QACC,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC;IAClC,CAAC;;gBA7BD,UAAU;;;;gBAjBF,eAAe;;IA+CxB,mBAAC;CAAA,AA9BD,IA8BC;SA7BY,YAAY","sourcesContent":["import { Injectable, OnDestroy } from \"@angular/core\";\nimport { Observable, fromEvent, Subscription } from \"rxjs\";\nimport { DocumentService } from \"./document.service\";\n\nexport type EventHandler = (event: Event) => void;\n\nexport const getEventObservable = (targetElement: HTMLElement | Element, eventType: string): Observable<Event> => {\n\tswitch (eventType) {\n\t\tcase \"scroll\":\n\t\tcase \"resize\":\n\t\tcase \"touchstart\":\n\t\tcase \"touchmove\":\n\t\tcase \"touchend\":\n\t\t\treturn fromEvent(targetElement, eventType, { passive: true });\n\t\tdefault:\n\t\t\treturn fromEvent(targetElement, eventType);\n\t}\n};\n\n@Injectable()\nexport class EventService implements OnDestroy {\n\tprotected subscriptions = new Subscription();\n\n\tprotected targets = new WeakMap<HTMLElement | Element | Document, Map<string, Observable<Event>>>();\n\n\tconstructor(protected documentService: DocumentService) {}\n\n\ton(targetElement: HTMLElement | Element, eventType: string, callback: EventHandler) {\n\t\tif (!this.targets.has(targetElement)) {\n\t\t\tthis.targets.set(targetElement, new Map());\n\t\t}\n\n\t\tconst eventMap = this.targets.get(targetElement);\n\n\t\tif (!eventMap.has(eventType)) {\n\t\t\teventMap.set(eventType, getEventObservable(targetElement, eventType));\n\t\t}\n\n\t\tconst subscription = eventMap.get(eventType).subscribe(callback);\n\t\tthis.subscriptions.add(subscription);\n\t}\n\n\tonDocument(eventType: string, callback: EventHandler) {\n\t\tthis.documentService.handleEvent(eventType, callback);\n\t}\n\n\tngOnDestroy() {\n\t\tthis.subscriptions.unsubscribe();\n\t}\n}\n"]}