{"version":3,"file":"scroll.js","sourceRoot":"","sources":["../src/utils/scroll.ts"],"names":[],"mappings":"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","sourcesContent":["import { map } from \"rxjs/operators\";\nimport { fromEvent, merge, Observable } from \"rxjs\";\n\n\n/**\n * Checks if a given element is scrollable.\n * If the element has an overflow set as part of its computed style it can scroll.\n * @param element the element to check scrollability\n */\nexport const isScrollableElement = (element: HTMLElement) => {\n\tconst computedStyle = getComputedStyle(element);\n\treturn (\n\t\tcomputedStyle.overflow === \"auto\" ||\n\t\tcomputedStyle.overflow === \"scroll\" ||\n\t\tcomputedStyle[\"overflow-y\"] === \"auto\" ||\n\t\tcomputedStyle[\"overflow-y\"] === \"scroll\" ||\n\t\tcomputedStyle[\"overflow-x\"] === \"auto\" ||\n\t\tcomputedStyle[\"overflow-x\"] === \"scroll\"\n\t);\n};\n\n/**\n * Checks if an element is visible within a container\n * @param element the element to check\n * @param container the container to check\n */\nexport const isVisibleInContainer = (element: HTMLElement, container: HTMLElement) => {\n\tconst elementRect = element.getBoundingClientRect();\n\tconst containerRect = container.getBoundingClientRect();\n\t// If there exists `height: 100%` on the `html` or `body` tag of an application,\n\t// it causes the calculation to return true if you need to scroll before the element is seen.\n\t// In that case we calculate its visibility based on the window viewport.\n\tif (container.tagName === \"BODY\" || container.tagName === \"HTML\") {\n\t\t// This checks if element is within the top, bottom, left and right of viewport, ie. if the element is visible in\n\t\t// the screen. This also takes into account partial visibility of an element.\n\t\tconst isAboveViewport = elementRect.top < 0 && (elementRect.top + element.clientHeight) < 0;\n\t\tconst isLeftOfViewport = elementRect.left < 0;\n\t\tconst isBelowViewport =\n\t\t\t(elementRect.bottom - element.clientHeight) > (window.innerHeight || document.documentElement.clientHeight);\n\t\tconst isRightOfViewport = elementRect.right > (window.innerWidth || document.documentElement.clientWidth);\n\n\t\tconst isVisibleInViewport = !(isAboveViewport || isBelowViewport || isLeftOfViewport || isRightOfViewport);\n\n\t\treturn isVisibleInViewport;\n\t}\n\treturn (\n\t\t// This also accounts for partial visibility. It will still return true if the element is partially visible inside the container.\n\t\t(elementRect.bottom - element.clientHeight) <= (containerRect.bottom + (container.offsetHeight - container.clientHeight) / 2) &&\n\t\telementRect.top >= (- element.clientHeight)\n\t);\n};\n\nexport const getScrollableParents = (node: HTMLElement) => {\n\tconst elements = [document.body];\n\twhile (node.parentElement && node !== document.body) {\n\t\tif (isScrollableElement(node)) {\n\t\t\telements.push(node);\n\t\t}\n\t\tnode = node.parentElement;\n\t}\n\treturn elements;\n};\n\n/**\n * Returns an observable that emits whenever any scrollable parent element scrolls\n *\n * @param node root element to start finding scrolling parents from\n */\nexport const scrollableParentsObservable = (node: HTMLElement): Observable<Event> => {\n\tconst windowScroll = fromEvent(window, \"scroll\", { passive: true }).pipe(map(event => (\n\t\t// update the event target to be something useful. In this case `body` is a sensible replacement\n\t\tObject.assign({}, event, { target: document.body }) as Event\n\t)));\n\tlet observables = [windowScroll];\n\t// walk the parents and subscribe to all the scroll events we can\n\twhile (node.parentElement && node !== document.body) {\n\t\tif (isScrollableElement(node)) {\n\t\t\tobservables.push(fromEvent(node, \"scroll\", { passive: true }));\n\t\t}\n\t\tnode = node.parentElement;\n\t}\n\n\treturn merge(...observables);\n};\n"]}