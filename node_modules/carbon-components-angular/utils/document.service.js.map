{"version":3,"file":"document.service.js","sourceRoot":"","sources":["../src/utils/document.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAa,MAAM,eAAe,CAAC;AACtD,OAAO,EAAE,UAAU,EAAE,YAAY,EAAE,MAAM,MAAM,CAAC;AAChD,OAAO,EAAgB,kBAAkB,EAAE,MAAM,iBAAiB,CAAC;;AAEnE;IAAA;QAIW,iBAAY,GAAG,IAAI,GAAG,EAA6B,CAAC;QAEpD,gBAAW,GAAG,QAAQ,CAAC;QAEvB,kBAAa,GAAG,IAAI,YAAY,EAAE,CAAC;KAsB7C;IApBA,qCAAW,GAAX,UAAY,SAAiB,EAAE,QAAsB;QACpD,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;YACtC,IAAI,IAAI,CAAC,WAAW,EAAE;gBACrB,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,SAAS,EAAE,kBAAkB,CAAC,IAAI,CAAC,WAAkB,EAAE,SAAS,CAAC,CAAC,CAAC;aACzF;iBAAM;gBACN,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,UAAU,EAAE,CAAC,CAAC;aACnD;SACD;QACD,IAAM,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QACpD,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,UAAU,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;IACxD,CAAC;IAED,qCAAW,GAAX,UAAY,QAAsB;QACjC,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;IACrC,CAAC;IAED,qCAAW,GAAX;QACC,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC;QACjC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;IAC1B,CAAC;;gBA7BD,UAAU,SAAC;oBACX,UAAU,EAAE,MAAM;iBAClB;;;0BAND;CAkCC,AA9BD,IA8BC;SA3BY,eAAe","sourcesContent":["import { Injectable, OnDestroy } from \"@angular/core\";\nimport { Observable, Subscription } from \"rxjs\";\nimport { EventHandler, getEventObservable } from \"./event.service\";\n\n@Injectable({\n\tprovidedIn: \"root\"\n})\nexport class DocumentService implements OnDestroy {\n\tprotected globalEvents = new Map<string, Observable<Event>>();\n\n\tprotected documentRef = document;\n\n\tprotected subscriptions = new Subscription();\n\n\thandleEvent(eventType: string, callback: EventHandler) {\n\t\tif (!this.globalEvents.has(eventType)) {\n\t\t\tif (this.documentRef) {\n\t\t\t\tthis.globalEvents.set(eventType, getEventObservable(this.documentRef as any, eventType));\n\t\t\t} else {\n\t\t\t\tthis.globalEvents.set(eventType, new Observable());\n\t\t\t}\n\t\t}\n\t\tconst observable = this.globalEvents.get(eventType);\n\t\tthis.subscriptions.add(observable.subscribe(callback));\n\t}\n\n\thandleClick(callback: EventHandler) {\n\t\tthis.handleEvent(\"click\", callback);\n\t}\n\n\tngOnDestroy() {\n\t\tthis.subscriptions.unsubscribe();\n\t\tthis.globalEvents = null;\n\t}\n}\n"]}