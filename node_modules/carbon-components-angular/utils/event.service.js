/**
 *
 * carbon-angular v0.0.0 | event.service.js
 *
 * Copyright 2014, 2020 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Injectable } from "@angular/core";
import { fromEvent, Subscription } from "rxjs";
import { DocumentService } from "./document.service";
export var getEventObservable = function (targetElement, eventType) {
    switch (eventType) {
        case "scroll":
        case "resize":
        case "touchstart":
        case "touchmove":
        case "touchend":
            return fromEvent(targetElement, eventType, { passive: true });
        default:
            return fromEvent(targetElement, eventType);
    }
};
var EventService = /** @class */ (function () {
    function EventService(documentService) {
        this.documentService = documentService;
        this.subscriptions = new Subscription();
        this.targets = new WeakMap();
    }
    EventService.prototype.on = function (targetElement, eventType, callback) {
        if (!this.targets.has(targetElement)) {
            this.targets.set(targetElement, new Map());
        }
        var eventMap = this.targets.get(targetElement);
        if (!eventMap.has(eventType)) {
            eventMap.set(eventType, getEventObservable(targetElement, eventType));
        }
        var subscription = eventMap.get(eventType).subscribe(callback);
        this.subscriptions.add(subscription);
    };
    EventService.prototype.onDocument = function (eventType, callback) {
        this.documentService.handleEvent(eventType, callback);
    };
    EventService.prototype.ngOnDestroy = function () {
        this.subscriptions.unsubscribe();
    };
    EventService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    EventService.ctorParameters = function () { return [
        { type: DocumentService }
    ]; };
    return EventService;
}());
export { EventService };
//# sourceMappingURL=event.service.js.map