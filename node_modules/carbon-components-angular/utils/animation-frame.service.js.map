{"version":3,"file":"animation-frame.service.js","sourceRoot":"","sources":["../src/utils/animation-frame.service.ts"],"names":[],"mappings":"AAAA,OAAO,EACN,UAAU,EAEV,MAAM,EACN,QAAQ,EACR,QAAQ,EACR,MAAM,eAAe,CAAC;AACvB,OAAO,EAAc,OAAO,EAAE,IAAI,EAAE,MAAM,MAAM,CAAC;AAEjD;IAQC,wCAAsB,MAAc;QAApC,iBAKC;QALqB,WAAM,GAAN,MAAM,CAAQ;QAJ1B,gBAAW,GAAG,IAAI,OAAO,EAAU,CAAC;QAK7C,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,CAAC;QAC5C,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC;YAC7B,KAAI,CAAC,gBAAgB,GAAG,qBAAqB,CAAC,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC,CAAC;QACvE,CAAC,CAAC,CAAC;IACJ,CAAC;IAED,oDAAW,GAAX;QACC,oBAAoB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAC7C,CAAC;IAES,+CAAM,GAAhB,UAAiB,KAAa;QAA9B,iBAKC;QAJA,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC7B,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC;YAC7B,qBAAqB,CAAC,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;IACJ,CAAC;;gBAxBD,UAAU;;;;gBANV,MAAM;;IA+BP,qCAAC;CAAA,AAzBD,IAyBC;SAxBY,8BAA8B;AA0B3C;IAIC,+BAAsB,SAAyC;QAAzC,cAAS,GAAT,SAAS,CAAgC;QAC9D,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IACvC,CAAC;;gBAND,UAAU;;;;gBAIuB,8BAA8B;;IAGhE,4BAAC;CAAA,AAPD,IAOC;SANY,qBAAqB;AAQlC,iEAAiE;AACjE,0FAA0F;AAC1F,MAAM,6DAA6D,aAA6C,EAAE,MAAc;IAC/H,OAAO,aAAa,IAAI,IAAI,8BAA8B,CAAC,MAAM,CAAC,CAAC;AACpE,CAAC;AAED,MAAM,CAAC,IAAM,0CAA0C,GAAG;IACzD,OAAO,EAAE,8BAA8B;IACvC,IAAI,EAAE,CAAC,CAAC,IAAI,QAAQ,EAAE,EAAE,IAAI,QAAQ,EAAE,EAAE,8BAA8B,CAAC,EAAE,MAAM,CAAC;IAChF,UAAU,EAAE,kDAAkD;CAC9D,CAAC","sourcesContent":["import {\n\tInjectable,\n\tOnDestroy,\n\tNgZone,\n\tOptional,\n\tSkipSelf\n} from \"@angular/core\";\nimport { Observable, Subject, from } from \"rxjs\";\n\n@Injectable()\nexport class AnimationFrameServiceSingleton implements OnDestroy {\n\tpublic tick: Observable<number>;\n\n\tprotected frameSource = new Subject<number>();\n\n\tprotected animationFrameId: number;\n\n\tconstructor(protected ngZone: NgZone) {\n\t\tthis.tick = this.frameSource.asObservable();\n\t\tthis.ngZone.runOutsideAngular(() => {\n\t\t\tthis.animationFrameId = requestAnimationFrame(this.doTick.bind(this));\n\t\t});\n\t}\n\n\tngOnDestroy() {\n\t\tcancelAnimationFrame(this.animationFrameId);\n\t}\n\n\tprotected doTick(frame: number) {\n\t\tthis.frameSource.next(frame);\n\t\tthis.ngZone.runOutsideAngular(() => {\n\t\t\trequestAnimationFrame(this.doTick.bind(this));\n\t\t});\n\t}\n}\n\n@Injectable()\nexport class AnimationFrameService {\n\tpublic tick: Observable<number>;\n\n\tconstructor(protected singleton: AnimationFrameServiceSingleton) {\n\t\tthis.tick = from(this.singleton.tick);\n\t}\n}\n\n// TODO: use `providedIn` instead of the provider factory pattern\n// either provides a new instance of AnimationFrameServiceSingleton, or returns the parent\nexport function ANIMATION_FRAME_SERVICE_SINGLETON_PROVIDER_FACTORY(parentService: AnimationFrameServiceSingleton, ngZone: NgZone) {\n\treturn parentService || new AnimationFrameServiceSingleton(ngZone);\n}\n\nexport const ANIMATION_FRAME_SERVICE_SINGLETON_PROVIDER = {\n\tprovide: AnimationFrameServiceSingleton,\n\tdeps: [[new Optional(), new SkipSelf(), AnimationFrameServiceSingleton], NgZone],\n\tuseFactory: ANIMATION_FRAME_SERVICE_SINGLETON_PROVIDER_FACTORY\n};\n"]}