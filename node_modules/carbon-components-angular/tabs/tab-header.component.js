/**
 *
 * carbon-angular v0.0.0 | tab-header.component.js
 *
 * Copyright 2014, 2020 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, ViewChild, ElementRef, Output } from "@angular/core";
import { Tab } from "./tab.component";
import { EventEmitter } from "@angular/core";
var TabHeader = /** @class */ (function () {
    function TabHeader() {
        /**
         * Indicates whether the `Tab` is active/selected.
         * Determines whether it's `TabPanel` is rendered.
         */
        this.active = false;
        /**
         * Indicates whether or not the `Tab` item is disabled.
         */
        this.disabled = false;
        /**
         * Value 'selected' to be emitted after a new `Tab` is selected.
         */
        this.selected = new EventEmitter();
        this._cacheActive = false;
    }
    Object.defineProperty(TabHeader.prototype, "cacheActive", {
        get: function () {
            return this._cacheActive;
        },
        /**
         * Set to 'true' to have pane reference cached and not reloaded on tab switching.
         */
        set: function (shouldCache) {
            this._cacheActive = shouldCache;
            // Updates the pane references associated with the tab header when cache active is changed.
            if (this.paneReference) {
                this.paneReference.cacheActive = this.cacheActive;
            }
        },
        enumerable: true,
        configurable: true
    });
    TabHeader.prototype.selectTab = function () {
        this.tabItem.nativeElement.focus();
        if (!this.disabled) {
            this.selected.emit();
            this.active = true;
            if (this.paneReference) {
                this.paneReference.active = true;
            }
        }
    };
    TabHeader.decorators = [
        { type: Component, args: [{
                    selector: "ibm-tab-header",
                    template: "\n\t\t<li\n\t\t\t[ngClass]=\"{\n\t\t\t\t'bx--tabs__nav-item--selected': active,\n\t\t\t\t'bx--tabs__nav-item--disabled': disabled\n\t\t\t}\"\n\t\t\tclass=\"bx--tabs__nav-item\"\n\t\t\trole=\"presentation\"\n\t\t\t(click)=\"selectTab()\">\n\t\t\t<a\n\t\t\t\t#tabItem\n\t\t\t\t[attr.aria-selected]=\"active\"\n\t\t\t\tdraggable=\"false\"\n\t\t\t\tclass=\"bx--tabs__nav-link\"\n\t\t\t\thref=\"javascript:void(0)\"\n\t\t\t\t[attr.tabindex]=\"(active? 0 : -1)\"\n\t\t\t\trole=\"tab\">\n\t\t\t\t<ng-content></ng-content>\n\t\t\t</a>\n\t\t</li>\n\t"
                },] },
    ];
    TabHeader.propDecorators = {
        active: [{ type: Input }],
        disabled: [{ type: Input }],
        paneReference: [{ type: Input }],
        cacheActive: [{ type: Input }],
        selected: [{ type: Output }],
        tabItem: [{ type: ViewChild, args: ["tabItem",] }]
    };
    return TabHeader;
}());
export { TabHeader };
//# sourceMappingURL=tab-header.component.js.map