{"version":3,"file":"alert-modal.component.js","sourceRoot":"","sources":["../src/modal/alert-modal.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EACN,SAAS,EACT,MAAM,EACN,SAAS,EAET,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,SAAS,EAAE,MAAM,oBAAoB,CAAC;AAE/C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAqCG;AACH;IA8BgC,8BAAS;IAExC;;OAEG;IACH,oBAC6B,SAAqB,EACpB,UAAkB,EAClB,UAAkB,EAChB,YAAoB,EAC5B,IAAY,EACG,mBAAmC,EAC/C,OAAY,EACd,OAAiB;QAPb,0BAAA,EAAA,qBAAqB;QAKX,oCAAA,EAAA,0BAAmC;QAC/C,wBAAA,EAAA,YAAY;QAPvC,YAUC,iBAAO,SAUP;QAnB4B,eAAS,GAAT,SAAS,CAAY;QACpB,gBAAU,GAAV,UAAU,CAAQ;QAClB,gBAAU,GAAV,UAAU,CAAQ;QAChB,kBAAY,GAAZ,YAAY,CAAQ;QAC5B,UAAI,GAAJ,IAAI,CAAQ;QACG,yBAAmB,GAAnB,mBAAmB,CAAgB;QAC/C,aAAO,GAAP,OAAO,CAAK;QACd,aAAO,GAAP,OAAO,CAAU;QAGzC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC7C,IAAM,MAAM,GAAG,KAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAC/B,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE;gBACf,MAAM,CAAC,EAAE,GAAG,wBAAsB,CAAG,CAAC;aACtC;YACD,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE;gBACjB,MAAM,CAAC,IAAI,GAAG,WAAW,CAAC;aAC1B;SACD;;IACF,CAAC;IAED,oCAAe,GAAf;QACC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YAAE,OAAO,KAAK,CAAC;SAAE;QACpC,IAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC;QAC3C,IAAI,OAAO,CAAC,YAAY,GAAG,OAAO,CAAC,YAAY,EAAE;YAChD,OAAO,CAAC,QAAQ,GAAG,CAAC,CAAC;SACrB;aAAM;YACN,OAAO,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC;SACtB;IACF,CAAC;IAED,kCAAa,GAAb,UAAc,WAAW;QACxB,IAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QACzC,IAAI,MAAM,CAAC,KAAK,EAAE;YACjB,MAAM,CAAC,KAAK,EAAE,CAAC;SACf;QAED,IAAI,CAAC,UAAU,EAAE,CAAC;IACnB,CAAC;IAED,iCAAY,GAAZ,UAAa,OAAO;QACnB,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,KAAK,EAAE;YACpD,OAAO;SACP;QACD,IAAI,CAAC,UAAU,EAAE,CAAC;IACnB,CAAC;;gBAjFD,SAAS,SAAC;oBACV,QAAQ,EAAE,iBAAiB;oBAC3B,QAAQ,EAAE,kiCA0BT;iBACD;;;;gDAOE,MAAM,SAAC,WAAW;6CAClB,MAAM,SAAC,YAAY;6CACnB,MAAM,SAAC,YAAY;6CACnB,MAAM,SAAC,cAAc;6CACrB,MAAM,SAAC,MAAM;8CACb,MAAM,SAAC,qBAAqB;gDAC5B,MAAM,SAAC,SAAS;gBACgB,QAAQ,uBAAxC,MAAM,SAAC,OAAO;;;0BAZf,SAAS,SAAC,SAAS;;IAmDrB,iBAAC;CAAA,AAlFD,CA8BgC,SAAS,GAoDxC;SApDY,UAAU","sourcesContent":["import {\n\tComponent,\n\tInject,\n\tViewChild,\n\tAfterViewInit\n} from \"@angular/core\";\nimport { BaseModal } from \"./base-modal.class\";\n\n/**\n * Component to create standard modals for presenting content or asking for user's input.\n * It can show as a passive modal showing only text or show as a transactional modal with\n * multiple buttons for different actions for the user to choose from.\n *\n * Using a modal in your application requires `ibm-modal-placeholder` which would generally be\n * placed near the end of your app component template (app.component.ts or app.component.html) as:\n *\n * ```html\n * <ibm-modal-placeholder></ibm-modal-placeholder>\n * ```\n *\n * Example of opening the modal:\n *\n * ```typescript\n * \\@Component({\n *  selector: \"app-modal-demo\",\n *  template: `\n *   <button class=\"btn--primary\" (click)=\"openModal()\">Open modal</button>\n *   <ibm-modal-placeholder></ibm-modal-placeholder>`\n * })\n * export class ModalDemo {\n * \topenModal() {\n * \t\tthis.modalService.show({\n *\t\t\tmodalType: \"default\",\n *\t\t\tmodalLabel: \"optional header text\",\n *\t\t\tmodalTitle: \"Modal modalTitle\",\n *\t\t\ttext: \"Modal text\",\n *\t\t\tbuttons: [{\n *\t\t\t\ttext: \"Button text\",\n *\t\t\t\ttype: \"primary\",\n *\t\t\t\tclick: clickFunction\n *\t\t\t}]\n *\t\t});\n * \t}\n * }\n * ```\n */\n@Component({\n\tselector: \"ibm-alert-modal\",\n\ttemplate: `\n\t\t<ibm-modal\n\t\t\t[size]=\"size\"\n\t\t\t[theme]=\"modalType\"\n\t\t\t[hasScrollingContent]=\"hasScrollingContent\"\n\t\t\t[modalLabel]=\"modalTitle\"\n\t\t\t(overlaySelected)=\"dismissModal('overlay')\">\n\t\t\t<ibm-modal-header (closeSelect)=\"dismissModal('close')\">\n\t\t\t\t<p class=\"bx--modal-header__label bx--type-delta\">{{modalLabel}}</p>\n\t\t\t\t<p class=\"bx--modal-header__heading bx--type-beta\">{{modalTitle}}</p>\n\t\t\t</ibm-modal-header>\n\t\t\t<div #content class=\"bx--modal-content\">\n\t\t\t\t<p [innerHTML]=\"modalContent\"></p>\n\t\t\t</div>\n\t\t\t<ibm-modal-footer *ngIf=\"buttons.length > 0\">\n\t\t\t\t<ng-container *ngFor=\"let button of buttons; let i = index\">\n\t\t\t\t\t<button\n\t\t\t\t\t\t[ibmButton]=\"button.type\"\n\t\t\t\t\t\t(click)=\"buttonClicked(i)\"\n\t\t\t\t\t\t[id]=\"button.id\"\n\t\t\t\t\t\t[attr.modal-primary-focus]=\"(button.type.indexOf('primary') !== -1 ? '' : null)\">\n\t\t\t\t\t\t{{button.text}}\n\t\t\t\t\t</button>\n\t\t\t\t</ng-container>\n\t\t\t</ibm-modal-footer>\n\t\t</ibm-modal>\n\t`\n})\nexport class AlertModal extends BaseModal implements AfterViewInit {\n\t@ViewChild(\"content\") content;\n\t/**\n\t * Creates an instance of `AlertModal`.\n\t */\n\tconstructor(\n\t\t@Inject(\"modalType\") public modalType = \"default\",\n\t\t@Inject(\"modalLabel\") public modalLabel: string,\n\t\t@Inject(\"modalTitle\") public modalTitle: string,\n\t\t@Inject(\"modalContent\") public modalContent: string,\n\t\t@Inject(\"size\") public size: string,\n\t\t@Inject(\"hasScrollingContent\") public hasScrollingContent: boolean = null,\n\t\t@Inject(\"buttons\") public buttons = [],\n\t\t@Inject(\"close\") public onClose: Function\n\t) {\n\t\tsuper();\n\t\tfor (let i = 0; i < this.buttons.length; i++) {\n\t\t\tconst button = this.buttons[i];\n\t\t\tif (!button.id) {\n\t\t\t\tbutton.id = `alert-modal-button-${i}`;\n\t\t\t}\n\t\t\tif (!button.type) {\n\t\t\t\tbutton.type = \"secondary\";\n\t\t\t}\n\t\t}\n\t}\n\n\tngAfterViewInit() {\n\t\tif (!this.content) { return false; }\n\t\tconst element = this.content.nativeElement;\n\t\tif (element.scrollHeight > element.clientHeight) {\n\t\t\telement.tabIndex = 0;\n\t\t} else {\n\t\t\telement.tabIndex = -1;\n\t\t}\n\t}\n\n\tbuttonClicked(buttonIndex) {\n\t\tconst button = this.buttons[buttonIndex];\n\t\tif (button.click) {\n\t\t\tbutton.click();\n\t\t}\n\n\t\tthis.closeModal();\n\t}\n\n\tdismissModal(trigger) {\n\t\tif (this.onClose && this.onClose(trigger) === false) {\n\t\t\treturn;\n\t\t}\n\t\tthis.closeModal();\n\t}\n}\n"]}